import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)
from telegram.constants import ChatAction
from telegram.helpers import escape_markdown
import tempfile, os
from pathlib import Path

from config import settings
from ai_agent import FirdavsAIAgent
from speech import speech_service, tts_bytes
from utils.user_prefs import get as prefs_get, set as prefs_set
from i18n.tts_support import VOICES_BY_LANG, SUPPORTED_TTS_LANGS

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# ---- user prefs constants ----
SUPPORTED_LANGS = ["ru-RU", "uz-UZ", "en-US"]

def rate_pitch_for_style(style: str) -> dict:
    s = (style or "neutral").lower()
    if s == "cheerful":
        return {"speaking_rate": 1.12, "pitch": 3.0}
    if s == "calm":
        return {"speaking_rate": 0.94, "pitch": -1.0}
    return {"speaking_rate": 0.98, "pitch": 1.0}

# ---- helper: send voice via temp file (safe for PTB v20) ----
async def _send_voice_bytes(bot, chat_id: int, audio_bytes: bytes, filename: str = "reply.ogg"):
    tmp = Path(tempfile.gettempdir()) / filename
    tmp.write_bytes(audio_bytes)
    try:
        await bot.send_voice(chat_id=chat_id, voice=str(tmp))
    finally:
        try:
            os.remove(tmp)
        except:
            pass

async def on_error(update, context):
    import logging as _logging
    _logging.getLogger("telegram_bot").exception("Unhandled", exc_info=context.error)

class FirdavsTelegramBot:
    def __init__(self):
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
        self.ai_agent = FirdavsAIAgent()
        self.app = Application.builder().token(settings.TELEGRAM_TOKEN).build()
        self.app.add_error_handler(on_error)
        self.setup_handlers()
        logger.info("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

    def setup_handlers(self):
        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(CommandHandler("help", self.help_command))
        self.app.add_handler(CommandHandler("contact", self.contact_command))
        self.app.add_handler(CommandHandler("skills", self.skills_command))
        self.app.add_handler(CommandHandler("experience", self.experience_command))
        self.app.add_handler(CommandHandler("status", self.status_command))
        self.app.add_handler(CommandHandler("debug", self.debug_command))  # –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
        self.app.add_handler(CommandHandler("voices", self.voices_command))
        self.app.add_handler(CommandHandler("lang", self.lang_command))
        self.app.add_handler(CommandHandler("voice", self.voice_command))
        self.app.add_handler(CommandHandler("style", self.style_command))
        self.app.add_handler(CommandHandler("prefs", self.prefs_command))
        self.app.add_handler(CallbackQueryHandler(self.button_callback))
        self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        self.app.add_handler(MessageHandler(filters.VOICE, self.handle_voice))

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
        keyboard = [
            [InlineKeyboardButton("üíº –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã", callback_data="experience"),
             InlineKeyboardButton("üõ† –ù–∞–≤—ã–∫–∏", callback_data="skills")],
            [InlineKeyboardButton("üöÄ –ö—Ä—É—Ç—ã–µ –ø—Ä–æ–µ–∫—Ç—ã", callback_data="projects"),
             InlineKeyboardButton("üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", callback_data="education")],
            [InlineKeyboardButton("üì± –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts"),
             InlineKeyboardButton("ü§ñ Voice AI", callback_data="voice_ai")]
        ]
        await update.message.reply_text(
            self.ai_agent.get_introduction(),
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        help_text = (
            "–ö—Ä–∞—Ç–∫–∞—è –ø–æ–º–æ—â—å:\n\n"
            "- /lang ‚Äî –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ (ru-RU, uz-UZ, en-US)\n"
            "- /voice ‚Äî –≤—ã–±—Ä–∞—Ç—å –≥–æ–ª–æ—Å –¥–ª—è —è–∑—ã–∫–∞\n"
            "- /style ‚Äî neutral | calm | cheerful\n"
            "- /prefs ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
        )
        await update.message.reply_text(help_text)

    async def prefs_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        uid = update.effective_user.id
        p = prefs_get(uid)
        lang = p.get("lang") or "ru-RU"
        voice = p.get("voice") or "auto"
        style = p.get("style") or "neutral"
        msg = (
            "–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            f"- –Ø–∑—ã–∫: {lang}\n"
            f"- –ì–æ–ª–æ—Å: {voice}\n"
            f"- –°—Ç–∏–ª—å: {style}"
        )
        await update.message.reply_text(msg)

    async def contact_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            self.ai_agent.get_contact_info(),
            parse_mode="Markdown"
        )

    async def skills_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            self.ai_agent.get_skills_overview(),
            parse_mode="Markdown"
        )

    async def experience_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            self.ai_agent.get_experience_overview(),
            parse_mode="Markdown"
        )

    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
        mem_status = self.ai_agent.memory.get_diagnostics()
        status_text = (
            "**üîß –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:**\n\n"
            f"‚öôÔ∏è –ú–æ–¥–µ–ª—å: {settings.GEMINI_MODEL}\n"
            f"{mem_status}\n\n"
            "–í—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç! –°–ø—Ä–∞—à–∏–≤–∞–π –ø—Ä–æ –§–∏—Ä–¥–∞–≤—Å–∞ üòä"
        )
        await update.message.reply_text(status_text, parse_mode="Markdown")

    async def lang_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —è–∑—ã–∫–∞"""
        keyboard = [[InlineKeyboardButton(code, callback_data=f"set_lang:{code}")] for code in SUPPORTED_LANGS]
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è/–æ–∑–≤—É—á–∫–∏:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def voice_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –≥–æ–ª–æ—Å–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞"""
        uid = update.effective_user.id
        prefs = prefs_get(uid)
        lang = prefs.get("lang", "ru-RU")
        voices = VOICES_BY_LANG.get(lang, [])
        if not voices:
            await update.message.reply_text(
                f"–î–ª—è {lang} —Ä–æ–¥–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è TTS."
            )
            return
        keyboard = [[InlineKeyboardButton(v, callback_data=f"set_voice:{v}")] for v in voices]
        await update.message.reply_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å –¥–ª—è {lang}:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def style_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Å—Ç–∏–ª—è –æ–∑–≤—É—á–∫–∏"""
        styles = ["neutral", "calm", "cheerful"]
        keyboard = [[InlineKeyboardButton(s, callback_data=f"set_style:{s}")] for s in styles]
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –æ–∑–≤—É—á–∫–∏:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def debug_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        user_id_int = update.effective_user.id
        user_id_int = update.effective_user.id
        user_id = str(update.effective_user.id)
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        test_context = self.ai_agent.memory.get_relevant_context(
            "–æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –Ω–∞–≤—ã–∫–∏ –ø—Ä–æ–µ–∫—Ç—ã", 
            user_id
        )
        
        debug_info = (
            "**üêõ Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n\n"
            f"User ID: {user_id}\n"
            f"Gemini Model: {settings.GEMINI_MODEL}\n"
            f"mem0 status: {self.ai_agent.memory.mem0_kind}\n"
            f"CV chunks: {self.ai_agent.memory.cv_col.count()}\n"
            f"KB chunks: {self.ai_agent.memory.kb_col.count()}\n\n"
            f"**–ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤):**\n"
            f"```\n{test_context[:500]}\n```"
        )
        
        await update.message.reply_text(debug_info, parse_mode="Markdown")

    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏"""
        query = update.callback_query
        await query.answer()
        user_id_str = str(query.from_user.id)
        user_id = query.from_user.id

        # –ë–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        mapping = {
            "experience": "–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–æ –ø—Ä–æ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –§–∏—Ä–¥–∞–≤—Å–∞ - –≥–¥–µ —Ä–∞–±–æ—Ç–∞–ª, "
                         "—á—Ç–æ –¥–µ–ª–∞–ª, –∫–∞–∫–∏–µ –±—ã–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è?",
            
            "skills": "–ö–∞–∫–æ–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫ —É –§–∏—Ä–¥–∞–≤—Å–∞? –í —á–µ–º –æ–Ω —Ä–µ–∞–ª—å–Ω–æ –∫—Ä—É—Ç? "
                     "–ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–ª—è AI/ML –ø—Ä–æ–µ–∫—Ç–æ–≤?",
            
            "projects": "–ü–æ–∫–∞–∂–∏ —Å–∞–º—ã–µ –≤–ø–µ—á–∞—Ç–ª—è—é—â–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –§–∏—Ä–¥–∞–≤—Å–∞ - —á—Ç–æ-—Ç–æ wow-—ç—Ñ—Ñ–µ–∫—Ç–Ω–æ–µ! "
                       "–û—Å–æ–±–µ–Ω–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç –ø—Ä–æ–µ–∫—Ç—ã —Å voice AI –∏ –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏.",
            
            "education": "–ö–∞–∫–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —É –§–∏—Ä–¥–∞–≤—Å–∞? –ì–¥–µ —É—á–∏–ª—Å—è, –∫–∞–∫–∏–µ –∫—É—Ä—Å—ã –ø—Ä–æ—Ö–æ–¥–∏–ª?",
            
            "contacts": "–î–∞–π –≤—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –§–∏—Ä–¥–∞–≤—Å–∞ –¥–ª—è —Å–≤—è–∑–∏. –ö–∞–∫ –ª—É—á—à–µ —Å –Ω–∏–º —Å–≤—è–∑–∞—Ç—å—Å—è?",
            
            "voice_ai": "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –æ–ø—ã—Ç –§–∏—Ä–¥–∞–≤—Å–∞ —Å voice AI –∏ voice cloning. "
                       "–ß—Ç–æ –æ–Ω —É–º–µ–µ—Ç –¥–µ–ª–∞—Ç—å —Å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏?"
        }
        
        data = query.data or ""

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
        if data.startswith("set_lang:"):
            lang = data.split(":", 1)[1]
            if lang in SUPPORTED_LANGS:
                p = prefs_set(user_id, lang=lang)
                # –ï—Å–ª–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ —è–∑—ã–∫–∞ –Ω–µ—Ç —Ä–æ–¥–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤ ‚Äî –æ–±–Ω—É–ª—è–µ–º voice
                if lang not in VOICES_BY_LANG:
                    prefs_set(user_id, voice=None)
                if lang == "uz-UZ":
                    await query.edit_message_text(
                        "–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: uz-UZ.\n"
                        "–¢–µ–∫—Å—Ç –±—É–¥–µ—Ç –Ω–∞ —É–∑–±–µ–∫—Å–∫–æ–º. –ì–æ–ª–æ—Å ‚Äî –ø–µ—Ä–µ–≤–µ–¥—ë–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π –¥–ª—è –ª—É—á—à–µ–π –æ–∑–≤—É—á–∫–∏. "
                        "–ú–æ–∂–Ω–æ —Å–º–µ–Ω–∏—Ç—å /voice –∏–ª–∏ /style."
                    )
                else:
                    await query.edit_message_text(
                        f"–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {lang}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å: /voice"
                    )
            else:
                await query.edit_message_text("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —è–∑—ã–∫")
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ–ª–æ—Å–∞
        if data.startswith("set_voice:"):
            voice = data.split(":", 1)[1]
            prefs_set(user_id, voice=voice)
            await query.edit_message_text(f"–ì–æ–ª–æ—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {voice}")
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è
        if data.startswith("set_style:"):
            style = data.split(":", 1)[1]
            if style not in ("neutral", "calm", "cheerful"):
                await query.edit_message_text("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Å—Ç–∏–ª—å")
                return
            prefs_set(user_id, style=style)
            await query.edit_message_text(f"–ì–æ—Ç–æ–≤–æ: —Å—Ç–∏–ª—å = {style}")
            return

        # –û–∑–≤—É—á–∏—Ç—å –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ –∫–Ω–æ–ø–∫–µ
        if data == "speak_text":
            # –ø—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å–∞–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç), —Å–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º voice
            chat_id = query.message.chat.id
            text_to_speak = query.message.text or ""
            if not text_to_speak:
                await query.edit_message_text("–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è")
                return
            p = prefs_get(user_id)
            rp = rate_pitch_for_style(p.get("style", "neutral"))
            audio_bytes = tts_bytes(
                text_to_speak,
                lang=p.get("lang") or "ru-RU",
                voice_name=p.get("voice"),
                **rp
            )
            await _send_voice_bytes(context.bot, chat_id, audio_bytes)
            await query.answer("–û–∑–≤—É—á–µ–Ω–æ")
            return

        if data in mapping:
            await context.bot.send_chat_action(
                chat_id=query.message.chat.id, 
                action=ChatAction.TYPING
            )
            
            response = self.ai_agent.generate_response(mapping[data], user_id_str)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
            keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")]]
            
            await query.edit_message_text(
                text=response,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="Markdown"
            )
        
        elif data == "menu":
            # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            keyboard = [
                [InlineKeyboardButton("üíº –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã", callback_data="experience"),
                 InlineKeyboardButton("üõ† –ù–∞–≤—ã–∫–∏", callback_data="skills")],
                [InlineKeyboardButton("üöÄ –ö—Ä—É—Ç—ã–µ –ø—Ä–æ–µ–∫—Ç—ã", callback_data="projects"),
                 InlineKeyboardButton("üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", callback_data="education")],
                [InlineKeyboardButton("üì± –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts"),
                 InlineKeyboardButton("ü§ñ Voice AI", callback_data="voice_ai")]
            ]
            
            await query.edit_message_text(
                text=self.ai_agent.get_introduction(),
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="Markdown"
            )

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = str(update.effective_user.id)
        user_name = update.effective_user.first_name
        
        logger.info(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name} (ID: {user_id}): {update.message.text}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
        await context.bot.send_chat_action(
            chat_id=update.effective_chat.id, 
            action=ChatAction.TYPING
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = self.ai_agent.generate_response(update.message.text, user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Markdown
        try:
            await update.message.reply_text(response, parse_mode="Markdown")
        except:
            # –ï—Å–ª–∏ Markdown —Å–ª–æ–º–∞–ª—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await update.message.reply_text(response)
        
        logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {user_name}")

    async def handle_voice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: STT -> LLM -> TTS (OGG_OPUS voice note)"""
        user_id_int = update.effective_user.id
        user_id = str(update.effective_user.id)
        user_name = update.effective_user.first_name
        voice = update.message.voice

        await context.bot.send_chat_action(
            chat_id=update.effective_chat.id,
            action=ChatAction.RECORD_VOICE
        )

        try:
            file = await context.bot.get_file(voice.file_id)
            ogg_bytes = await file.download_as_bytearray()

            # STT (Google) —Å —è–∑—ã–∫–æ–º –∏–∑ prefs –∏ —Ñ–æ–ª–±—ç–∫–æ–º –¥–ª—è —É–∑–±–µ–∫—Å–∫–æ–≥–æ
            p_stt = prefs_get(user_id_int)
            stt_lang = p_stt.get("lang") or "ru-RU"
            if stt_lang == "uz-UZ":
                stt_lang = "ru-RU"  # TODO: –≤–∫–ª—é—á–∏—Ç—å Whisper –ø–æ–∑–∂–µ
            text = await speech_service.transcribe_ogg_opus(bytes(ogg_bytes), language_code=stt_lang, user_id=user_id_int)
            if not text:
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ ‚úã")
                return

            # LLM –æ—Ç–≤–µ—Ç
            response_text = self.ai_agent.generate_response(text, user_id)

            # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ‚Äî –Ω–µ –æ–∑–≤—É—á–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫—É
            if len(response_text) > 900:
                keyboard = [[InlineKeyboardButton("–û–∑–≤—É—á–∏—Ç—å", callback_data="speak_text")]]
                await update.message.reply_text(response_text, reply_markup=InlineKeyboardMarkup(keyboard))
            else:
                # TTS —Å —É—á–µ—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
                p = prefs_get(user_id_int)
                rp = rate_pitch_for_style(p.get("style", "neutral"))
                audio_bytes = tts_bytes(
                    response_text,
                    lang=p.get("lang") or "ru-RU",
                    voice_name=p.get("voice"),
                    **rp
                )

                await _send_voice_bytes(context.bot, update.effective_chat.id, audio_bytes)

            logger.info(f"üé§ Voice processed for {user_name}")
        except Exception:
            logger.exception("Voice handling failed")
            await update.message.reply_text("–£–ø—Å, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")

    async def voices_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –≥–æ–ª–æ—Å–∞ Google TTS"""
        rec = (
            "–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —Ä—É—Å—Å–∫–∏–µ –≥–æ–ª–æ—Å–∞ Google TTS (–∫–∞—á–µ—Å—Ç–≤–æ/–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å):\n\n"
            "- ru-RU-Neural2-D (–º—É–∂—Å–∫–æ–π, –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π)\n"
            "- ru-RU-Wavenet-D (–º—É–∂—Å–∫–æ–π, –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π)\n"
            "- ru-RU-Wavenet-C (–∂–µ–Ω—Å–∫–∏–π, —Ç—ë–ø–ª—ã–π)\n"
            "- ru-RU-Standard-A (–º—É–∂—Å–∫–æ–π, –±–∞–∑–æ–≤—ã–π)\n\n"
            f"–¢–µ–∫—É—â–∏–π –≥–æ–ª–æ—Å: {settings.GCP_TTS_VOICE_NAME}\n"
            "–ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è GCP_TTS_VOICE_NAME"
        )
        await update.message.reply_text(rec)

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("üéØ –ó–∞–ø—É—Å–∫–∞–µ–º polling...")
        self.app.run_polling(drop_pending_updates=True)




